<?php

namespace App\Filament\Resources;

use App\Filament\Resources\FragmentResource\Pages;
use App\Models\Fragment;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Columns\ImageColumn;
use Filament\Tables\Columns\Layout\Grid;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

class FragmentResource extends Resource
{
    protected static ?string $model = Fragment::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                //
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->recordUrl(
                fn (Fragment $record): string => FragmentResource::getUrl('read', ['record' => $record]),
            )->columns([
                Grid::make([
                    'lg' => 12,
                ])->schema([
                    ImageColumn::make('video.attachments')->extraImgAttributes(fn (Fragment $record): array => [
                        'title' => "{$record->video->title}",
                    ])->disabledClick(true)
                        ->columnSpan([
                            'lg' => 1,
                        ]),
                    TextColumn::make('text')
                        ->searchable()
                        ->disabledClick(true)
                        ->columnSpan([
                            'lg' => 11,
                        ]),
                ]),
            ])
            ->filters([
                SelectFilter::make('video')
                    ->relationship('video', 'title')
                    ->searchable()
                    ->preload(),
                Filter::make('is_autogenerated')->query(fn (Builder $query): Builder => $query->where('is_autogenerated', true))
                    ->toggle(),
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListFragments::route('/'),
            'create' => Pages\CreateFragment::route('/create'),
            'edit' => Pages\EditFragment::route('/{record}/edit'),
            'read' => Pages\ReadFragments::route('/{record}/read'),
        ];
    }
}
