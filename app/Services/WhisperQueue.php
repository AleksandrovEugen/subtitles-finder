<?php

namespace App\Services;

use App\Models\Video;
use Illuminate\Console\Command;
use PhpAmqpLib\Channel\AMQPChannel;
use PhpAmqpLib\Connection\AMQPStreamConnection;
use PhpAmqpLib\Message\AMQPMessage;

class WhisperQueue
{
    protected AMQPStreamConnection $connection;

    protected AMQPChannel $channel;

    protected string $queueName;

    public function __construct(protected WhisperService $whisperService)
    {
        $this->queueName = config('rabbitmq.whisper_queue');
    }

    public function sendMessage(string $message): void
    {
        $this->initConnection();

        $this->channel->queue_declare($this->queueName, false, true, false, false);

        $msg = new AMQPMessage($message, ['delivery_mode' => AMQPMessage::DELIVERY_MODE_PERSISTENT]);

        $this->channel->basic_publish($msg, '', $this->queueName);

        $this->closeConnection();
    }

    public function transcribeQueueVideos(Command $console, $output = null): void
    {
        $this->initConnection();

        $callback = function ($msg) use ($console, $output) {
            $youtubeId = $msg->body;

            $console->info('Received - '.$youtubeId);

            $subtitles = $this->whisperService->transcribe($youtubeId, 'ru', $output);

            if ($subtitles) {
                $video = Video::where('youtube_id', $youtubeId)->first();
                $video->update(['subtitles_autogenerated' => $subtitles]);

                $console->info('Transcribed video - '.$video->title);
            }

            $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);
        };

        $this->channel->basic_consume($this->queueName, '', false, false, false, false, $callback);

        $console->info('Waiting for videos. To exit press CTRL+C');

        try {
            $this->channel->consume();
        } catch (\Throwable $exception) {
            $console->error($exception->getMessage());
        }
    }

    protected function initConnection(): void
    {
        $this->connection = new AMQPStreamConnection(config('rabbitmq.host'), config('rabbitmq.port'),
            config('rabbitmq.user'), config('rabbitmq.password'));

        $this->channel = $this->connection->channel();
    }

    protected function closeConnection(): void
    {
        $this->channel->close();
        $this->connection->close();
    }
}
