<?php

declare(strict_types=1);

use Elastic\Adapter\Indices\Mapping;
use Elastic\Adapter\Indices\Settings;
use Elastic\Migrations\Facades\Index;
use Elastic\Migrations\MigrationInterface;

final class CreateFragments implements MigrationInterface
{
    /**
     * Run the migration.
     */
    public function up(): void
    {
        Index::create('fragments', function (Mapping $mapping, Settings $settings) {

            // https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-hunspell-tokenfilter.html
            // https://www.elastic.co/guide/en/elasticsearch/reference/7.17/analysis-standard-analyzer.html

            // Стандартный языковой анализатор не используется потому что у него очень странный список стоп слов.
            // Там нормальные слова, а не только предлоги и тд
            $settings->analysis([
                'filter' => [
                    'ru_stemmer' => [
                        'type' => 'hunspell',
                        'locale' => 'ru_RU',
                    ],
                    'ru_stop' => [
                        'type' => 'stop',
                        'ignore_case' => true,
                        'stopwords' => [], // потом можно сюда добавить свой список стоп слов для русского языка
                    ],
                ],
                'analyzer' => [
                    'hunspell_analyzer' => [
                        'type' => 'custom',
                        'tokenizer' => 'standard',
                        'char_filter' => [
                            'html_strip',
                        ],
                        'filter' => [
                            'lowercase',
                            'ru_stop',
                            'ru_stemmer',
                        ],
                    ],
                ],
            ]);

            $mapping->text('text', ['analyzer' => 'hunspell_analyzer']); // russian анализатор не возвращает токены на некоторые слова
            $mapping->integer('video_id');
            $mapping->integer('playlist_id');
            $mapping->boolean('is_autogenerated');
        });
    }

    /**
     * Reverse the migration.
     */
    public function down(): void
    {
        Index::dropIfExists('fragments');
    }
}
